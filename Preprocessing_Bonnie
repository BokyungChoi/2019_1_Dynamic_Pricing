{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(r\"C:\\Users\\BokyungChoi\\Desktop\\GrowthHackers\\project_dynamic\\dataset\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3049: DtypeWarning: Columns (7) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "pruduct=pd.read_csv(\"pruduct.csv\")\n",
    "pruduct.sort_values(by='PD_C',ascending=True,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CLNT_ID       int64\n",
       "SESS_ID       int64\n",
       "HITS_SEQ      int64\n",
       "PD_C          int64\n",
       "PD_ADD_NM    object\n",
       "PD_BRA_NM    object\n",
       "PD_BUY_AM    object\n",
       "PD_BUY_CT    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pruduct.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "master=pd.read_csv('master.csv')\n",
    "master.sort_values(by='PD_C',ascending=True,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pruduct + master MERGE\n",
    "pdt_df=pruduct.merge(master,on='PD_C',how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#가격에 있는 ','를 제거하여 integer화\n",
    "pdt_df['PD_BUY_AM']=pdt_df.PD_BUY_AM.apply(lambda x:x.replace(',',''))\n",
    "pdt_df['PD_BUY_AM']=pdt_df['PD_BUY_AM'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CLNT_ID       int64\n",
       "SESS_ID       int64\n",
       "HITS_SEQ      int64\n",
       "PD_C          int64\n",
       "PD_ADD_NM    object\n",
       "PD_BRA_NM    object\n",
       "PD_BUY_AM     int32\n",
       "PD_BUY_CT    object\n",
       "PD_NM        object\n",
       "CLAC1_NM     object\n",
       "CLAC2_NM     object\n",
       "CLAC3_NM     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdt_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#GROUPBY로 중분류별 구매 amount의 mean 구하기\n",
    "temp_df=pdt_df.groupby(['CLAC1_NM','CLAC2_NM'])['PD_BUY_AM'].mean()\n",
    "type_df=temp_df.to_frame()\n",
    "type_df=type_df.rename(columns={'PD_BUY_AM':\"Mean_BUY_AM\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#소수점자리 2자리로 끊어내기\n",
    "type_df['Mean_BUY_AM']=type_df.Mean_BUY_AM.apply(lambda x:format(x,\"20.2f\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#GROUPBY로 중분류별 구매한 세션 수 구하기\n",
    "temp2_df=pdt_df.groupby(['CLAC1_NM','CLAC2_NM'])['PD_BUY_AM'].count()\n",
    "temp2_df=temp2_df.to_frame()\n",
    "temp2_df=temp2_df.rename(columns={'PD_BUY_AM':\"Num_of_BUY\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#mean + 세션 count CONCAT -> 37대분류, 128개의 중분류\n",
    "type_df=pd.concat([type_df, temp2_df], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#저장\n",
    "type_df.to_csv(\"pruduct_type.csv\",encoding='ms949')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#직관적으로 알 수 있듯이 데이터상에서도 평균가격이 낮은 중분류일수록 구매 횟수 현저히 많음.\n",
    "pd.plotting.scatter_matrix(type_df, figsize=(6, 4))\n",
    "plt.xlabel('Mean purchase amount per category')\n",
    "plt.ylabel('Number of sessions with purchase')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
